
CODE




/*
 %------------------------------------------------- NEW WINDOW ----------------------------------------------------------

 const screenWidth : int := Config.Display (cdScreenWidth)
 const screenHeight : int := Config.Display (cdScreenHeight)
 const titleBarHeight : int := 32
 const windowEdgeSize : int := 13
 const windowWidth : int := 150
 const windowHeight : int := 100
 var windowID, windowNumber, closeButton, quitButton : int := 0




 quitButton := GUI.CreateButton (10, 10, 130, "Quit", GUI.Quit)

 procedure CloseAndOpen
 if windowID not= 0 then
 GUI.CloseWindow (windowID)
 end if
 windowNumber += 1
 var xPos : int := Rand.Int (0, screenWidth - windowWidth - windowEdgeSize)
 var yPos : int := Rand.Int (0, screenHeight - windowHeight - titleBarHeight)
 windowID := Window.Open ("title:Window #" +
 intstr (windowNumber) + ",graphics:" +
 intstr (windowWidth) + ";" + intstr (windowHeight) +
 ",position:" + intstr (xPos) + ";" + intstr (yPos))
 closeButton := GUI.CreateButton (10, 60, 130,
 "Close And Open", CloseAndOpen)
 quitButton := GUI.CreateButton (10, 10, 130, "Quit", GUI.Quit)
 end CloseAndOpen
 CloseAndOpen









 loop
 exit when GUI.ProcessEvent
 end loop
 GUI.CloseWindow (windowID)
 %------------------------------------------------------------------------------------------------------------
 %*/









/*
 ------------------------------------------------- CHANGE BUTTON COLOR ----------------------------------------------------------
 % Selection Box ----------------------------------------------------
 proc drawSelecLineY (x, y, buttonxsize, buttonysize : int)
 for i : 4 .. buttonysize - 4 by 2
 drawdot (x, y + i, 1)
 end for
 end drawSelecLineY

 proc drawSelecLineX (x, y, buttonxsize, buttonysize : int)
 for i : 4 .. buttonxsize - 4 by 2
 drawdot (x + i, y, 1)
 end for
 end drawSelecLineX

 proc drawSelectionBox (x, y, buttonxsize, buttonysize : int)
 drawSelecLineY (x + 4, y, buttonxsize, buttonysize)
 drawSelecLineY (x - 4 + buttonxsize, y, buttonxsize, buttonysize)
 drawSelecLineX (x, y + 4, buttonxsize, buttonysize)
 drawSelecLineX (x, y - 4 + buttonxsize, buttonxsize, buttonysize)
 end drawSelectionBox
 % -------------------------------------------------------------------

 % Draw Released Button ----------------------------------------------------------------
 proc objReButton (x, y, buttonxsize, buttonysize, clr : int)
 drawline (x, y, x + buttonxsize, y, 15)
 drawline (x + buttonxsize, y, x + buttonxsize, y + buttonysize, 15)
 drawline (x + 1, y + 1, x - 1 + buttonxsize, y + 1, 22)
 drawline (x + buttonxsize - 1, y + 1, x - 1 + buttonxsize, y + buttonysize - 1, 22)
 drawfillbox (x + 2, y + 2, x - 2 + buttonxsize, y - 2 + buttonysize, clr)
 drawline (x + 1, y + buttonysize - 1, x - 2 + buttonxsize, y + buttonysize - 1, 30)
 drawline (x + 1, y + buttonysize - 1, x - buttonxsize + 1 + buttonxsize, y + 2, 30)
 drawline (x, y + buttonysize, x - 1 + buttonxsize, y + buttonysize, 31)
 drawline (x, y + buttonysize, x - buttonxsize + buttonxsize, y + 1, 31)
 end objReButton
 % -------------------------------------------------------------------------------------

 % Draw Pressed Button ------------------------------------------------------
 proc objPrButton (x, y, buttonxsize, buttonysize, clr : int)
 drawfillbox (x + 2, y + 2, x - 2 + buttonxsize, y - 2 + buttonysize, clr)
 drawbox (x, y, x + buttonxsize, y + buttonysize, 7)
 drawbox (x + 1, y + 1, x - 1 + buttonxsize, y - 1 + buttonysize, 22)
 end objPrButton
 % --------------------------------------------------------------------------

 % Draw Button(x, y, width, height, colour : int, [released/pressed], [selected/deselected] : srting)
 proc drawbutton (x, y, buttonxsize, buttonysize, clr : int, press, select : string)
 if press = "released" and select = "selected" then
 objReButton (x, y, buttonxsize, buttonysize, clr)
 drawSelectionBox (x, y, buttonxsize, buttonysize)
 elsif press = "released" and select = "deselected" then
 objReButton (x, y, buttonxsize, buttonysize, clr)
 elsif press = "pressed" and select = "selected" then
 objPrButton (x, y, buttonxsize, buttonysize, clr)
 drawSelectionBox (x, y, buttonxsize, buttonysize)
 elsif press = "pressed" and select = "deselected" then
 objPrButton (x, y, buttonxsize, buttonysize, clr)
 end if
 end drawbutton

 % All Possibilities -------------------------------------------
 drawbutton (1, 1, 50, 50, brightblue, "released", "deselected")
 drawbutton (1, 51, 50, 50, brightblue, "pressed", "deselected")
 drawbutton (1, 102, 50, 50, brightblue, "released", "selected")
 drawbutton (1, 153, 50, 50, brightblue, "pressed", "selected")
 %--------------------------------------------------------------
 ------------------------------------------------------------------------------------------------------------
 */


/*
 ----------------------------------------------------------------------------------------------------
 % The "Buttons" program.
 % This demonstrates the Button widget along with the GUI routines
 % that use Button widgets. [SetDefault, Enable, Disable, Show, Hide,
 % SetPosition, SetPositionAndSize, Refresh, SetLabel, Quit, CreateButton,
 % CreateButtonFull, ProcessEvent, Dispose]

 import GUI % Must be included in a programs using the GPL

 View.Set ("graphics:400;300,noecho") % Shrink the window to the minimum size

 % The button IDs
 var button1, button2 : int
 var changeDefaultButton, enableDisableButton, showHideButton : int
 var moveButton, resizeButton, refreshButton, changeText1Button : int
 var changeText2Button, quitButton : int

 % Variables used by the button routines
 var newDefault := 1 % Which button to make default
 var enable := false % Whether to enable or disable the button
 var hide := true % Whether to hide or show the button
 var right := true % Whether to move the button right or left
 var big := true % Whether ot make the button big or small
 % The array of names for button 1
 const button1Names : array 0 .. 4 of string := init ("Button 1", "a",
 "abcdef", "abcdefghijkl",
 "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ")
 var text1 := 1 % The array index to change button 1 to
 % The array of names for button 2
 const button2Names : array 0 .. 4 of string := init ("Button 2", "a",
 "abcdef", "abcdefghijkl",
 "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ")
 var text2 := 1 % The array index to change button 2 to

 % The routines the widgets call when pressed
 % Called when button 1 is pressed
 procedure Button1Pressed
 locate (1, 1)
 put "Button 1 Pressed                        " ..
 end Button1Pressed

 % Called when button 2 is pressed
 procedure Button2Pressed
 locate (1, 1)
 put "Button 2 Pressed                        " ..
 end Button2Pressed

 % Called when enable/disable button is pressed
 procedure EnableDisablePressed
 locate (1, 1)
 if enable then
 put "Button 1 Enabled                        " ..
 GUI.Enable (button1) % Enable Button 1
 enable := false
 GUI.SetLabel (enableDisableButton, "Disable Button 1")
 else
 put "Button 1 Disabled                       " ..
 GUI.Disable (button1) % Disable Button 1
 enable := true
 GUI.SetLabel (enableDisableButton, "Enable Button 1")
 end if
 end EnableDisablePressed

 % Called when show/hide button is pressed
 procedure ShowHidePressed
 locate (1, 1)
 if hide then
 put "Button 1 Hidden                         " ..
 GUI.Hide (button1) % Hide Button 1
 hide := false
 GUI.SetLabel (showHideButton, "Show Button 1")
 else
 put "Button 1 Shown                          " ..
 GUI.Show (button1) % Show Button 1
 hide := true
 GUI.SetLabel (showHideButton, "Hide Button 1")
 end if
 end ShowHidePressed

 % Called when move button is pressed
 procedure MovePressed
 locate (1, 1)
 if right then
 put "Button 1 Moved Right                    " ..
 GUI.SetPosition (button1, 280, maxy - 125) % Move Button 1 Right
 right := false
 GUI.SetLabel (moveButton, "Move Button 1 Left")
 else
 put "Button 1 Moved Left                     " ..
 GUI.SetPosition (button1, 60, maxy - 125) % Move Button 1 Left
 right := true
 GUI.SetLabel (moveButton, "Move Button 1 Right")
 end if
 end MovePressed

 % Called when refresh button is pressed
 procedure RefreshPressed
 Draw.FillBox (0, 0, maxx, maxy, GUI.GetBackgroundColour) % Clear the screen
 GUI.Refresh % Redraw all the widgets on the screen
 end RefreshPressed

 % Called when change button 1's text is pressed
 procedure ChangeText1Pressed
 locate (1, 1)
 put "Button 1 Text Becomes: " + button1Names (text1) +
 "                                   " ..
 GUI.SetLabel (button1, button1Names (text1))
 text1 := (text1 + 1) mod 5
 end ChangeText1Pressed

 % Called when change button 2's text is pressed
 procedure ChangeText2Pressed
 locate (1, 1)
 put "Button 2 Text Becomes: " + button2Names (text2) +
 "                                   " ..
 GUI.SetLabel (button2, button2Names (text2))
 text2 := (text2 + 1) mod 5
 end ChangeText2Pressed

 % Called when resize button is pressed
 procedure ResizePressed
 locate (1, 1)
 if big then
 put "Button 1 Made Large                     " ..
 % Move and Resize Button 1
 GUI.SetPositionAndSize (button1, 280, maxy - 125, 100, 100)
 big := false
 GUI.SetLabel (resizeButton, "Make Button 1 Small")
 else
 put "Button 1 Made Small                     " ..
 % Move and Resize Button 1
 GUI.SetPositionAndSize (button1, 60, maxy - 125, 0, 0)
 big := true
 GUI.SetLabel (resizeButton, "Make Button 1 Large")
 end if
 end ResizePressed

 % Called when change default button is pressed
 procedure ChangeDefaultPressed
 locate (1, 1)
 if newDefault = 1 then
 put "Button 1 Made Default                   " ..
 GUI.SetDefault (button1, true) % Make button 1 default
 newDefault := 2
 GUI.SetLabel (changeDefaultButton, "Set Button 2 as default")
 else
 put "Button 2 Made Default                   " ..
 GUI.SetDefault (button2, true) % Make button 2 default
 newDefault := 1
 GUI.SetLabel (changeDefaultButton, "Set Button 1 as default")
 end if
 end ChangeDefaultPressed

 % Called when quit button is pressed.
 procedure QuitPressed
 GUI.Quit
 end QuitPressed

 % The main program
 % Create the buttons
 button1 := GUI.CreateButton (60, maxy - 125, 0, "Button 1", Button1Pressed)
 button2 := GUI.CreateButtonFull (160, maxy - 125, 100, "Button 2",
 Button2Pressed, 100, GUI.NONE, true)

 % Create the dividing line
 var line := GUI.CreateLine (0, maxy - 135, maxx, maxy - 135, 0)

 % Create the buttons
 enableDisableButton := GUI.CreateButton (33, maxy - 170, 150,
 "Disable Button 1", EnableDisablePressed)
 showHideButton := GUI.CreateButton (216, maxy - 170, 150, "Hide Button 1",
 ShowHidePressed)
 moveButton := GUI.CreateButton (33, maxy - 200, 150, "Move Button 1 Right",
 MovePressed)
 refreshButton := GUI.CreateButton (216, maxy - 200, 150, "Refresh",
 RefreshPressed)
 changeText1Button := GUI.CreateButton (33, maxy - 230, 150,
 "Change Button 1 Text", ChangeText1Pressed)
 changeText2Button := GUI.CreateButton (216, maxy - 230, 150,
 "Change Button 2 Text", ChangeText2Pressed)
 resizeButton := GUI.CreateButton (33, maxy - 260, 150, "Make Button 1 Large",
 ResizePressed)
 changeDefaultButton := GUI.CreateButton (216, maxy - 260, 150,
 "Set Button 1 as default", ChangeDefaultPressed)
 quitButton := GUI.CreateButton (125, maxy - 290, 150, "Quit", QuitPressed)

 % Process events, exit loop when GUI.QUIT called
 loop
 exit when GUI.ProcessEvent
 end loop

 % Do the clean up.  Dispose of all but the main buttons.
 GUI.Dispose (enableDisableButton)
 GUI.Dispose (showHideButton)
 GUI.Dispose (moveButton)
 GUI.Dispose (refreshButton)
 GUI.Dispose (changeText1Button)
 GUI.Dispose (changeText2Button)
 GUI.Dispose (resizeButton)
 GUI.Dispose (changeDefaultButton)
 GUI.Dispose (quitButton)

 % Create a label to indicate we're finished
 var quitMessage := GUI.CreateLabelFull (0, 0, "Execution Terminated",
 maxx, maxy - 135, GUI.CENTER + GUI.MIDDLE, 0)
 --------------------------------------------------------------------------------------------------------------------------
 */
































%drawfilloval (maxx div 2, maxy div 2, 100, 100, black)

/*
 % font list
 var font := Font.New ("Impact:26")

 var text := "Watch as I align myself"
 var width := Font.Width (text, font)

 Font.Draw (text, 0, maxy div 2, font, red)
 delay (1000)
 cls
 Font.Draw (text, round (maxx / 2 - width / 2), maxy div 2, font, red)
 delay (1000)
 cls
 Font.Draw (text, round (maxx - width), maxy div 2, font, red)
 */
/*
 var font, font1 : int
 font := Font.New ("serif:12")
 var width : int := Font.Width ("This is in a serif font", font)

 var height, ascent, descent, internalLeading : int
 Font.Sizes (font, height, ascent, descent, internalLeading)
 Draw.Text ("This is in a serif font", 50, 30, font, red)
 */
% The "FontList" program.
/*
 setscreen ("text")

 var fontName : string
 var bold, italic, underline : boolean
 var size : int
 var styles : array boolean, boolean, boolean of string :=
 init ("", "underline", "italic", "italic,underline", "bold",
 "bold,underline", "bold,italic", "bold,italic,underline")

 % Start the font listing
 Font.StartName
 loop
 % Get the font name
 fontName := Font.GetName
 exit when fontName = ""
 % Get the styles the font comes in
 Font.GetStyle (fontName, bold, italic, underline)
 % For each possible style (bold, italic, underline & combo thereof)
 for b : false .. bold
 for i : false .. italic
 for u : false .. underline
 put fontName : 30, styles (b, i, u) : 22 ..
 % Start the listing of the font sizes
 Font.StartSize (fontName, styles (b, i, u))
 loop
 % List each font size. A size of -1 means the font
 % is scalable to pretty much any size
 size := Font.GetSize
 exit when size = 0;
 if size = -1 then
 put "scalable" ..
 else
 put size, " " ..
 end if
 end loop
 put ""
 end for
 end for
 end for
 end loop
 */
